#+title: Emacs Configuration
#+options: toc:nil num:nil

https://gist.github.com/yaodong/532e5b31781724ea2566503edcc498c3
https://github.com/pcorey/.emacs.d/blob/master/init.el#L279
https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
https://github.com/felixSchl/.emacs.d/blob/master/init.el
https://github.com/sondr3/dotfiles/blob/master/home/emacs/core/am-keybindings.el
https://github.com/magnars/.emacs.d/blob/master/settings/setup-org.el
https://github.com/bling/dotemacs/tree/master/config

(byte-recompile-directory (expand-file-name "~/.emacs.d") 0)

* Variables
TODO make this platform specific
#+BEGIN_SRC emacs-lisp

;; detect platform

(setq cjm/is-windows nil)
(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (message "Microsoft Windows")
(setq cjm/is-windows t)

  (setq cjm/note-dir "c:/Users/Public/dev/docs/notes")
  (setq cjm/ipython-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev/scripts/ipython.exe")

  (setq cjm/devroot-dir "C:/Users/Public/dev/")
  ;; C:\Users\Public\dev\bin\dbConda-2019_07-py37\condabin\conda.bat
  (setq cjm/conda-envs (concat cjm/devroot-dir "bin/dbConda-2019_07-py37/envs/"))
  (setq cjm/main-conda (concat cjm/conda-envs "dev/"))
  (setq cjm/default-env (concat cjm/conda-envs "dev/"))
  (setq cjm/black-path (concat cjm/default-env "Scripts/black.exe"))
  (setq cjm/zimports-path (concat cjm/default-env "Scripts/zimports.exe"))
  (setq cjm/zimports-modules (concat cjm/default-env "datastore,dig,db,qis,refinitiv"))
  (setq cjm/latex-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/tools/Scripts")
  (setq cjm/python-interpreter (concat cjm/main-conda "Scripts/" "ipython.exe"))
  (setq cjm/src-code-directory (concat cjm/devroot-dir "src/"))
  (setq cjm/python-path (concat cjm/default-env "python.exe"))
  (setq cjm/pytest_cmd (concat cjm/default-env "Scripts/pytest"))
  (setq cjm/flake8-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev/Scripts/flake8.exe")
  (setq cjm/isort-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev/Scripts/isort.exe")
  (setq cjm/black-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev/Scripts/black.exe")

  (setq org-directory "c:/dev/docs/org/")
  (setq org-agenda-files (list
                          (concat org-directory "quantdb.org")
                          (concat org-directory "index.org")
                          (concat org-directory "research.org")
                          (concat org-directory "todo.org")))

)
 ((string-equal system-type "darwin") ; Mac OS X
    (message "Mac OS X"))
 ((string-equal system-type "gnu/linux") ; linux
    (message "Linux")
    (setq cjm/note-dir "/home/chris/Dropbox/org/notes")
    
    (setq cjm/python-path "/home/chris/miniconda3/envs/new/bin/python")
    (setq cjm/ipython-path "/home/chris/miniconda3/envs/new/bin/ipython")
    (setq cjm/pytest_cmd "/home/chris/miniconda3/envs/dev/bin/pytest")
    (setq cjm/flake8-path "/home/chris/miniconda3/envs/dev/bin/flake8")
    (setq cjm/isort-path "/home/chris/miniconda3/envs/dev/bin/isort")
    (setq cjm/black-path "/home/chris/miniconda3/envs/dev/bin/black")

  ;; (setq org-startup-latex-with-latex-preview t)
  ;; (setq org-preview-latex-fragment t)

  (setq org-directory "c:/dev/docs/org/")
  (setq org-agenda-files '("~/org"))


))


#+END_SRC

* Configure =use-package=

#+begin_src emacs-lisp
(message "Configure use-package")
#+end_src

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

* =evil-mode=

#+begin_src emacs-lisp
(message "=evil-mode=")
#+end_src

Use =evil=.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (setq evil-collection-mode-list '(dired))
  (evil-collection-init))
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

Use =evil= with Org agendas.

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :config
  (evil-define-key 'normal evil-org-mode-map "t" 'org-todo)
  ;; (evil-define-key 'normal evil-org-mode-map (kbd "RET" 'org-)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))

  (evil-org-agenda-set-keys))
#+end_src

* UI preferences
#+begin_src emacs-lisp
(message "UI preferences")
#+end_src

** to file
#+begin_src emacs-lisp


(defun cjm/load-init()
  (interactive)
  (load user-init-file))

;; (add-hook 'after-init-hook '(lambda () (w32-send-sys-command #xf030)))


(defalias 'yes-or-no-p 'y-or-n-p)
(blink-cursor-mode -1)
(show-paren-mode t)

(setq-default mode-line-format nil)

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(use-package writeroom-mode
  :ensure t)

(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))

(use-package evil-nerd-commenter :ensure t)

(use-package key-chord
  :ensure t
  :config
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "Kj" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "KJ" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "kJ" 'evil-normal-state))

(defun toggle-buffers ()
  (interactive)
  (switch-to-buffer nil))

(use-package ranger :ensure t)
#+end_src

** Key bindings

Inspired by Spacemacs use SPC as main keybinding and comma as mode specific menu.

https://github.com/noctuid/general.el#evil-examples
https://github.com/sondr3/dotfiles/blob/master/home/emacs/core/am-keybindings.el

#+begin_src emacs-lisp

;; this prevents emacs from being slow on windoes?
(setq inhibit-compacting-font-caches t)
;; (define-key dired-mode-map (kbd ",") nil)

(use-package general
  :ensure t
  :config

  (general-define-key
   :states '(normal)
   :keymaps 'org-mode-map
    "<S-return>" 'cjm/org-open-at-point
)

  ;; mode specific
  ;; orgmode
  (general-define-key
   :states '(normal)
   :keymaps 'org-mode-map
   :prefix ","
   "l" '(nil :wk "link")
   "lc" '(org-cliplink :wk "clip")
   "li" '(org-insert-link :wk "insert")
   "lg" '(counsel-org-link :wk "go")
    
   "t" '(nil :wk "table")
   "ti" 'org-table-create
   "ta" 'org-table-align
   "tc" 'org-table-insert-column
   "tr" 'org-table-insert-row

   "s" '(nil :wk "section")
   "sh" 'org-insert-heading
   "d" '(nil :wk "date")
   "dt" 'org-time-stamp-inactive

   "n" '(nil :wk "narrow")
   "ns" 'org-narrow-to-subtree
   "nw" 'widen

   "b" '(nil :wk "blocks")
   "bt" 'org-toggle-blocks

   "w" '(nil :wk "writeroom")
   "wo" 'cjm/org-writeroom-on
   "wx" 'cjm/org-writeroom-off

   "a" '(nil :wk "agenda")
   "at" 'org-todo-list
   "aa" 'org-agenda
)

  ;; python
  (general-define-key
   :states '(normal)
   :keymaps 'anaconda-mode-map
   :prefix ","

   "b" '(python-insert-breakpoint :wk "breakpoint")
   "n" '(cjm/python-insert-ifname :wk "ifname")
   "t" '(cjm/pytest :wk "pytest")
   "x" 'cjm/run-python

   "r" '(:ignore t :wk "refactor")
   "rb" 'python-black-buffer
   "rs" 'python-isort-buffer
   "rr" '((lambda () (interactive) (python-isort-buffer)(python-black-buffer)(flycheck-buffer)) :which-key "all")
   "rz" 'zimports)

  ;; Main menu
  (general-define-key
   :states '(normal)
   :keymaps 'override
   "ff" 'ace-window
   "tt" 'writeroom-mode

  )

  ;; Main menu
  (general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :keymaps 'override
   :non-normal-prefix "C-SPC"
   "/"   'counsel-rg
   ;; "/"   'counsel-grep
   ;; "/"   'counsel-ag
   "SPC" 'counsel-M-x
   "."   'cjm/open-config
   "\""  'split-window-below
   "%"  'split-window-right
   "TAB" 'toggle-buffers
   "k" 'cjm/kill-current-buffer
   "n" 'ace-window

   "w" '(nil :wk "writeroom")
   "wg" 'global-writeroom-mode
   "ww" 'writeroom-mode

   ;; buffers
   "b" '(:ignore t :which-key "buffers")
   "bb"  'ivy-switch-buffer

   ;; emacs
   "e" '(:ignore t :which-key "emacs")
   "er"  'restart-emacs
   "ei"  'cjm/load-init
   "eb"  'eval-buffer
   "ev"  'counsel-describe-variable
   "ef"  'counsel-describe-function
   "em"  'lispy-multiline

                                        ; projectile
   "p" '(:ignore t :which-key "projectile")
   "pi" 'projectile-invalidate-cache
   "pp" 'projectile-switch-project
   "pr" 'projectile-recentf
   "pf" 'counsel-projectile-find-file
   "pb" 'persp-counsel-switch-buffer
   "pa" 'projectile-find-file-in-known-projects
   "pn" 'persp-next
   "px" 'persp-kill
   "ps" 'persp-switch

   ;; files
   "f" '(:ignore t :which-key "files")
   "fa" 'bookmark-set
   "fb" 'counsel-bookmark
   "fc" 'cjm/copy-file-name-to-clipboard
   "fd" 'dired-at-point
   "ff" 'counsel-find-file
   "fr" 'counsel-recentf
   "fs" 'save-buffer
   "fp" 'cjm/copy-current-line-position-to-clipboard
   "fn" 'cjm/rename-file-and-buffer
   "fx" 'cjm/delete-file-and-buffer

   ;; code
   "c" '(:ignore t :which-key "code")
   "cl" 'evilnc-comment-or-uncomment-lines
   "cn" 'flycheck-next-error
   "cp" 'flycheck-previous-error
   "cf" 'cjm/toggle-fold

   ;; hide
   "h" '(:ignore t :which-key "hide")
   "hh" 'hs-toggle-hiding
   "hs" 'hs-show-all

   ;; apps
   "a" '(:ignore t :which-key "apps")
   "ar" 'ranger
   "ac" 'calendar

   "t" 'org-capture

   ;; window
   "w" '(:ignore t :which-key "window")
   "wl"  'windmove-right
   "wh"  'windmove-left
   "wk"  'windmove-up
   "wj"  'windmove-down
   "w\""  'split-window-below
   "w%"  'split-window-right
   "wx"  'delete-window
   "wf" 'new-frame
   "wo" 'other-frame
   "ws" 'ace-swap-window
   "ww" 'ace-window

   ;; search
   "s" '(:ignore t :which-key "search")
   "sc" 'evil-ex-nohighlight
   "sl" 'ivy-resume

   ;; deft
   "d"  '(nil :wk "deft")
   "dd" '(deft :wk "deft")
   "dD" '(zetteldeft-deft-new-search :wk "new search")
   "dR" '(deft-refresh :wk "refresh")
   "ds" '(zetteldeft-search-at-point :wk "search at point")
   "dc" '(zetteldeft-search-current-id :wk "search current id")
   "df" '(zetteldeft-follow-link :wk "follow link")
   "dF" '(zetteldeft-avy-file-search-ace-window :wk "avy file other window")
   "dl" '(zetteldeft-avy-link-search :wk "avy link search")
   "dt" '(zetteldeft-avy-tag-search :wk "avy tag search")
   "dT" '(zetteldeft-tag-buffer :wk "tag list")
   "di" '(zetteldeft-find-file-id-insert :wk "insert id")
   "dI" '(zetteldeft-find-file-full-title-insert :wk "insert full title")
   "do" '(zetteldeft-find-file :wk "find file")
   "dn" '(zetteldeft-new-file :wk "new file")
   "dN" '(zetteldeft-new-file-and-link :wk "new file & link")
   "dr" '(zetteldeft-file-rename :wk "rename")
   "dx" '(zetteldeft-count-words :wk "count words")

   ;;log
   "l" '(nil :wk "Log")
   "ll" 'cjm/open-log
   "lp" 'cjm/open-project))

;; (global-set-key (kbd "C-x k") 'cjm/kill-current-buffer)

(define-key evil-motion-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-motion-state-map (kbd "C-j") 'evil-window-down)
(define-key evil-motion-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-motion-state-map (kbd "C-l") 'evil-window-right)

(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

(define-key global-map (kbd "C-h") #'evil-window-left)
(define-key global-map (kbd "C-j") #'evil-window-down)
(define-key global-map (kbd "C-k") #'evil-window-up)
(define-key global-map (kbd "C-l") #'evil-window-right)

(use-package evil-escape
  :config
  (evil-escape-mode 1)
  (setq evil-escape-key-sequence (kbd "jk")))

(global-set-key (kbd "M-o") 'next-multiframe-window)

(use-package perspective
  :config
  (persp-mode)
  (setq persp-state-default-file (expand-file-name "work" (expand-file-name "persp-confs/" user-emacs-directory)))) 

(use-package persp-projectile)
#+end_src
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+begin_src emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode -1)
#+end_src

There's a tiny scroll bar that appears in the minibuffer window. This disables
that:

#+begin_src emacs-lisp
(set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

The default frame title isn't useful. This binds it to the name of the current
project:

#+begin_src emacs-lisp
(setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

** Use fancy lambdas

Why not?

#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-light t)
  ;; :init (load-theme 'spacemacs-dark t)
  :config

  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))
#+end_src

#+begin_src

;; old school yellow text
(use-package gruvbox-theme)

(use-package spacemacs-theme
  :config (load-theme 'spacemacs-dark t)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))

 (defun hrs/apply-theme ()
   "Apply the `solarized-light' theme and make frames just slightly transparent."
   (interactive)
   (load-theme 'solarized-light t)
   (load-theme 'solarized-darkt))
#+end_src

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+begin_src
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame (hrs/apply-theme))))
  (hrs/apply-theme))
#+end_src


#+begin_src emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  :config
  (progn
    (spaceline-define-segment buffer-id
      (if (buffer-file-name)
          (let ((project-root (projectile-project-p)))
            (if project-root
                (file-relative-name (buffer-file-name) project-root)
              (abbreviate-file-name (buffer-file-name))))
        (powerline-buffer-id)))
    (spaceline-spacemacs-theme)
    (spaceline-toggle-minor-modes-off)))
#+end_src

** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src

** Set default font and configure font resizing

I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+begin_src emacs-lisp
(setq hrs/default-font "Source Code Pro")
(setq hrs/default-font-size 11)
(setq hrs/current-font-size hrs/default-font-size)

(setq hrs/font-change-increment 1.1)

(defun hrs/font-code ()
  "Return a string representing the current font (like \"Inconsolata-14\")."
  (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

(defun hrs/set-font-size ()
  "Set the font to `hrs/default-font' at `hrs/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
  (let ((font-code (hrs/font-code)))
    (if (assoc 'font default-frame-alist)
        (setcdr (assoc 'font default-frame-alist) font-code)
      (add-to-list 'default-frame-alist (cons 'font font-code)))
    (set-frame-font font-code)))

(defun hrs/reset-font-size ()
  "Change font size back to `hrs/default-font-size'."
  (interactive)
  (setq hrs/current-font-size hrs/default-font-size)
  (hrs/set-font-size))

(defun hrs/increase-font-size ()
  "Increase current font size by a factor of `hrs/font-change-increment'."
  (interactive)
  (setq hrs/current-font-size
        (ceiling (* hrs/current-font-size hrs/font-change-increment)))
  (hrs/set-font-size))

(defun hrs/decrease-font-size ()
  "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq hrs/current-font-size
        (max 1
             (floor (/ hrs/current-font-size hrs/font-change-increment))))
  (hrs/set-font-size))

(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
(define-key global-map (kbd "C-=") 'hrs/increase-font-size)
(define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
(define-key global-map (kbd "C--") 'hrs/decrease-font-size)

(hrs/reset-font-size)
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+begin_src
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src


#+begin_src emacs-lisp
(message "UI preferences")
#+end_src
* Project management

#+begin_src emacs-lisp
(message "Project management")
#+end_src


I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

** =ag=

Install =ag= to provide search within projects (usually through
=projectile-ag=).

#+begin_src emacs-lisp
(use-package ag)
#+end_src

** =company=

Company gives text completion in buffers etc. Use =company-mode= everywhere.

#+begin_src emacs-lisp
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

Use =M-/= for completion.

#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'company-complete-common)
#+end_src

** =dumb-jump=

The =dumb-jump= package works well enough in a [[https://github.com/jacktasia/dumb-jump#supported-languages][ton of environments]], and it
doesn't require any additional setup. I've bound its most useful command to
=M-.=.

#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
  (setq dumb-jump-selector 'ivy))
#+end_src

** =flycheck=

Flycheck will have you visit all warnings and whatnot, only visit errors.
#+begin_src emacs-lisp
(use-package let-alist)
(use-package flycheck
  :config
  (setq flycheck-idle-change-delay 7)
  (setq-default flycheck-flake8-maximum-line-length 89)
  (setq flycheck-python-flake8-executable cjm/flake8-path)
  (setq flycheck-check-syntax-automatically '(save idle-change)
        flycheck-idle-change-delay 2
        ;; flycheck-error-list-minimum-level 'warning
        flycheck-navigation-minimum-level 'error)

  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'elisp-mode-hook 'flycheck-mode))
#+end_src


** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
(use-package projectile
  :config
  (setq projectile-completion-system 'ivy)
  (setq projectile-indexing-method 'alien)
  (setq projectile-sort-order 'recently-active)
  (projectile-global-mode))

(use-package counsel-projectile)
#+end_src

** =restclient=

#+begin_src emacs-lisp
(use-package restclient)
(use-package company-restclient
  :config
  (add-to-list 'company-backends 'company-restclient))
#+end_src

** =undo-tree=

I like tree-based undo management. I only rarely need it, but when I do, oh boy.

#+begin_src emacs-lisp
(use-package undo-tree)
#+end_src

* Editing settings

#+begin_src emacs-lisp
(message "Editing settings")
#+end_src
** General

Install structured text support.
#+begin_src emacs-lisp

(use-package markdown-mode)

;; render links as clickable
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html
(add-hook 'text-mode-hook (lambda ()
                            (goto-address-mode)))

(add-hook 'prog-mode-hook (lambda ()
                            (goto-address-mode)))
#+end_src



#+begin_src
(use-package magit)
(use-package evil-magit)
#+end_src


#+begin_src emacs-lisp

;; don't ask to update buffer when file changed
(global-auto-revert-mode t)


;; search whatever is highlighted
(use-package evil-visualstar
  :config
  (global-evil-visualstar-mode))


(use-package smartparens

  :config

  (require 'smartparens-config)
  (smartparens-global-mode t))

(use-package yaml-mode

  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml" . yaml-mode)))
;; restart emacs in emacs
(use-package restart-emacs)

;; general
(setq create-lockfiles nil)
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
(setq delete-old-versions -1 )
;;(setq inhibit-startup-screen t )
(setq ring-bell-function 'ignore )
(setq sentence-end-double-space nil)
(setq default-fill-column 80)
(setq initial-scratch-message "")
(setq word-wrap t)

(use-package eshell-bookmark
  :after eshell
  :config
  (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
#+end_src

UTF-8 everywhere.

#+begin_src emacs-lisp
(setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system
 (if (eq system-type 'windows-nt)
     'utf-16-le  ;; https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
   'utf-8))
(prefer-coding-system 'utf-8)
#+end_src

** Hide-show

Add hide leafs to hide show bindings to add method for hidding methods of a class.

#+begin_src emacs-lisp
(defun cjm/hs-hide-all ()
  "Hide all top level blocks, displaying only first and last lines.
Move point to the beginning of the line, and run the normal hook
`hs-hide-hook'.  See documentation for `run-hooks'.
If `hs-hide-comments-when-hiding-all' is non-nil, also hide the comments."
  (interactive)
  (hs-life-goes-on
   (save-excursion
     (unless hs-allow-nesting
       (hs-discard-overlays (point-min) (point-max)))
     (goto-char (point-min))
     (syntax-propertize (point-max))
     (let ((spew (make-progress-reporter "Hiding all blocks..."
                                         (point-min) (point-max)))
           (re (concat "\\("
                       hs-block-start-regexp
                       "\\)"
                       (if hs-hide-comments-when-hiding-all
                           (concat "\\|\\("
                                   hs-c-start-regexp
                                   "\\)")
                         ""))))
       (while (progn
                (unless hs-hide-comments-when-hiding-all
                  (forward-comment (point-max)))
                (re-search-forward re (point-max) t))
         (if (match-beginning 1)
             ;; We have found a block beginning.
             (progn
               (goto-char (match-beginning 1))
               (unless (if 'ttn-hs-hide-level-1
                           (funcall 'ttn-hs-hide-level-1)
                         (hs-hide-block-at-point t))
                 ;; Go to end of matched data to prevent from getting stuck
                 ;; with an endless loop.
                 (when (looking-at hs-block-start-regexp)
                   (goto-char (match-end 0)))))
           ;; found a comment, probably
           (let ((c-reg (hs-inside-comment-p)))
             (when (and c-reg (car c-reg))
               (if (> (count-lines (car c-reg) (nth 1 c-reg)) 1)
                   (hs-hide-block-at-point t c-reg)
                 (goto-char (nth 1 c-reg))))))
         (progress-reporter-update spew (point)))
       (progress-reporter-done spew)))
   (beginning-of-line)
   (run-hooks 'hs-hide-hook)))

(defun ttn-hs-hide-level-1 ()
  (hs-hide-level 1)
  (forward-sexp 1))

;; if defined, this is called by regular hs-hide-all,
;; https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/hideshow.el#L99
(setq hs-hide-all-non-comment-function nil)

(define-key evil-normal-state-map (kbd "zl") 'cjm/hs-hide-all)

;; (define-key evil-normal-state-map (kbd "zl") 'hs-hide-leafs)
#+end_src

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
(defun hrs/visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))

(global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)
#+end_src

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+begin_src emacs-lisp
(use-package helpful)

;; (global-set-key (kbd "C-h f") #'helpful-callable)
;; (global-set-key (kbd "C-h v") #'helpful-variable)
;; (global-set-key (kbd "C-h k") #'helpful-key)
(evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window)
#+end_src

** Look for executables in =/usr/local/bin=

#+begin_src
(hrs/append-to-path "/usr/local/bin")
#+end_src

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
(save-place-mode t)
#+end_src

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Install and configure =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+end_src

** Configure =yasnippet=

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

I /don’t/ want =yas= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (setq yas-indent-line 'auto)
  (yas-global-mode 1))
#+end_src

** Configure =ivy= and =counsel=

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

counsel-rg?
#+begin_src emacs-lisp

(use-package ivy
:ensure t
:config
(setq ivy-use-virtual-buffers t))

;; fuzzy
;; https://oremacs.com/2016/01/06/ivy-flx/
;; (setq ivy-re-builders-alist
;;       '((t . ivy--regex-fuzzy)))
;; (setq ivy-initial-inputs-alist nil)
;; (setq ivy-re-builders-alist
;;       '((ivy-switch-buffer . ivy--regex-plus)
;;         (t . ivy--regex-fuzzy)))

(setq ivy-re-builders-alist
  '(
    ;; (swiper . ivy--regex-plus)
    (counsel-recentf . ivy--regex-fuzzy)
    (counsel-M-x . ivy--regex-fuzzy)
    (projectile-recentf . ivy--regex-fuzzy)
    (projectile-find-file-in-known-projects . ivy--regex-fuzzy)
    (find-file . ivy--regex-fuzzy)
    (t . ivy--regex-plus)))

(setq )
'counsel-find-file

(use-package flx :ensure t)
;; (use-package counsel :ensure t)


(use-package counsel

:config
(use-package flx)
(use-package smex)

(ivy-mode 1)
;; (setq ivy-use-virtual-buffers t)
;; (setq ivy-count-format "(%d/%d) ")
;; (setq ivy-initial-inputs-alist nil)
;; (setq ivy-re-builders-alist
;;       '((swiper . ivy--regex-plus)
;;         (t . ivy--regex-fuzzy))))
** Use projectile everywhere

#+begin_src emacs-lisp
(projectile-mode)
#+end_src

* Utility functions
#+begin_src emacs-lisp
(message "Utility functions")
#+end_src

Format elisp in org mode
https://www.reddit.com/r/emacs/comments/9tp79o/elispformat_in_org_mode/
#+begin_src emacs-lisp
(defun edit-src-block (src fn language)
  "Replace SRC org-element's value property with the result of FN.
FN is a function that operates on org-element's value and returns a string.
LANGUAGE is a string referring to one of orb-babel's supported languages.
(https://orgmode.org/manual/Languages.html#Languages)"
  (let ((src-language (org-element-property :language src))
        (value (org-element-property :value src)))
    (when (string= src-language language)
      (let ((copy (org-element-copy src)))
        (org-element-put-property copy :value
                                  (funcall fn value))
        (org-element-set-element src copy)))))

(defun format-elisp-string (string)
  "Indents elisp buffer string and reformats dangling parens."
  (with-temp-buffer
    (let ((inhibit-message t))
      (emacs-lisp-mode)
      (insert
       (replace-regexp-in-string "[[:space:]]*
[[:space:]]*)" ")" string))
      (indent-region (point-min) (point-max))
      (buffer-substring (point-min) (point-max)))))

(defun format-elisp-src-blocks ()
  "Format Elisp src blocks in the current org buffer"
  (interactive)
  (save-mark-and-excursion
    (let ((AST (org-element-parse-buffer)))
      (org-element-map AST 'src-block
        (lambda (element)
          (edit-src-block element #'format-elisp-string "emacs-lisp")))
      (delete-region (point-min) (point-max))
      (insert (org-element-interpret-data AST)))))
#+end_src

#+begin_src emacs-lisp


(defun cjm/org-open-at-point ()
  "Open file link or URL at mouse."
  ;; (interactive "e")
  ;; (interactive)
  ;; (mouse-set-point ev)
  ;; (if (eq major-mode 'org-agenda-mode)
  ;;     (org-agenda-copy-local-variable 'org-link-abbrev-alist-local))
        (interactive)
  (let ((org-link-frame-setup
         '((vm . vm-visit-folder)
           (gnus . gnus)
           (file . find-file))))
    (org-open-at-point))
  )

  (defun cjm/org-writeroom-on ()

    (add-hook 'org-mode-hook 'writeroom-mode)
    (interactive)
    (writeroom-mode))

  (defun cjm/org-writeroom-off()
    (remove-hook 'org-mode-hook 'writeroom-mode)
    (interactive)
    (writeroom-mode))

  (defun cjm/derived-modes (mode)
    "Return a list of the ancestor modes that MODE is derived from.
  https://emacs.stackexchange.com/questions/58073/how-to-find-inheritance-of-modes"
    (let ((modes   ())
          (parent  nil))
      (while (setq parent (get mode 'derived-mode-parent))
        (push parent modes)
        (setq mode parent))
      (setq modes  (nreverse modes))))
  ;; (derived-modes 'org-mode)

  (defun cjm/toggle-fold()
    "Toggle fold all lines larger than indentation on current line
    https://stackoverflow.com/questions/1587972/how-to-display-indentation-guides-in-emacs/4459159#4459159
  "
    (interactive)
    (let ((col 1))
      (save-excursion
        (back-to-indentation)
        (setq col (+ 1 (current-column)))
        (set-selective-display
         (if selective-display nil (or col 1))))))

  ;; org-babel
  ;; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
  ;; https://orgmode.org/manual/Results-of-Evaluation.html#Results-of-Evaluation
  (setq org-babel-python-command cjm/python-path)
  (setq org-confirm-babel-evaluate nil)
  ;; https://www.masteringemacs.org/article/compiling-running-scripts-emacs
  ;;; Shut up compile saves
  (setq compilation-ask-about-save nil)
  ;;; Don't save *anything*
  (setq compilation-save-buffers-predicate '(lambda () nil))
  (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)


  ;; (defun my-recompile ()
  ;;   "Run compile and resize the compile window closing the old one if necessary"
  ;;   (interactive)
  ;;   (progn
  ;;     (if (get-buffer "*compilation*") ; If old compile window exists
  ;;         (progn
  ;;           (delete-windows-on (get-buffer "*compilation*")) ; Delete the compilation windows
  ;;           (kill-buffer "*compilation*") ; and kill the buffers))
  ;;           (call-interactively 'pytest)
  ;;           (enlarge-window 50)))

(defun remove-py-debug ()  
  "remove py debug code, if found"  
  (interactive)  
  (let ((x (line-number-at-pos))  
    (cur (point)))  
    (search-forward-regexp python--pdb-breakpoint-string)  
    (if (= x (line-number-at-pos))  
    (let ()  
      (move-beginning-of-line 1)  
      (kill-line 1)  
      (move-beginning-of-line 1))  
      (goto-char cur))))  

(local-set-key (kbd "C c <f9>") 'remove-py-debug)

      ;; https://www.masteringemacs.org/article/compiling-running-scripts-emacs
      (defun python--add-debug-highlight ()
        "Adds a highlighter for use by `python--pdb-breakpoint-string'"
        (highlight-lines-matching-regexp "## DEBUG ##\\s-*$" 'hi-red-b))

      (defvar python--pdb-breakpoint-string "import pdb; pdb.set_trace() ## DEBUG ##"
        "Python breakpoint string used by `python-insert-breakpoint'")

      (defun python-insert-breakpoint ()
        "Inserts a python breakpoint using `pdb'"
        (interactive)
        (back-to-indentation)
        ;; this preserves the correct indentation in case the line above
        ;; point is a nested block
        (split-line)
        (insert python--pdb-breakpoint-string))

      (defadvice compile (before ad-compile-smart activate)
        "Advises `compile' so it sets the argument COMINT to t
  if breakpoints are present in `python-mode' files"
        (when (derived-mode-p major-mode 'python-mode)
          (save-excursion
            (save-match-data
              (goto-char (point-min))
              (if (re-search-forward (concat "^\\s-*" python--pdb-breakpoint-string "$")
                                     (point-max) t)
                  ;; set COMINT argument to `t'.
                  (ad-set-arg 1 t))))))


      (defcustom endless/compile-window-size 105
        "Width given to the non-compilation window."
        :type 'integer
        :group 'endless)

      (defun cjm/run-python(comint)
        (interactive "P")
        (compile (eval (concat cjm/python-path " " buffer-file-name)) (and comint t)))

      (defun cjm/pytest (comint)
        (interactive "P")
        (if cjm/is-windows nil (save-buffer))
        (compile (eval (concat cjm/pytest_cmd  " -s " buffer-file-name)) (and comint t)))

          ;; exit without confirming running process
          (setq confirm-kill-processes nil)
          ;; kill buffer with process running confirmation
          (setq kill-buffer-query-functions nil)
          (setq compilation-always-kill t)


          (defun cjm/compile-please(comint)
            "Compile without confirmation.
  With a prefix argument, use comint-mode.
  https://endlessparentheses.com/better-compile-command.html
  "
            (interactive "P")
            ;; Do the command without a prompt.
            (save-window-excursion
              (compile (eval compile-command) (and comint t)))
            ;; Create a compile window of the desired width.
            (pop-to-buffer (get-buffer "*compilation*"))
            (enlarge-window
             (- (frame-width)
                endless/compile-window-size
                (window-width))
             'horizontal))

          ;; https://stackoverflow.com/questions/9324802/running-interactive-python-script-from-emacs
          (add-hook 'python-mode-hook
                    (lambda ()
                      (set (make-local-variable 'compile-command)
                           (concat cjm/python-path " " buffer-file-name))))

          (global-set-key (kbd "<f4>") (lambda () (interactive) (setq current-prefix-arg '(4)) (call-interactively 'compile)))
          (global-set-key (kbd "<f3>") (lambda () (interactive) (recompile)) )
          ;; https://stackoverflow.com/questions/443302/emacs-how-to-compile-run-make-without-pressing-enter-for-the-compile-command
          ;; this doesn't work
          ;; (setq compilation-read-command nil)


          (defun cjm/zimports()
            (start-process
             "a"
             "b"
             cjm/zimports-path
             "-m"
             cjm/zimports-modules
             (buffer-file-name (window-buffer (minibuffer-selected-window)))))

          (defun zimports()
            (interactive)
            (cjm/zimports))

          (defun cjm/delete-file-and-buffer ()
            "Kill the current buffer and deletes the file it is visiting."
            (interactive)
            (let ((filename (buffer-file-name)))
              (when filename
                (if (vc-backend filename)
                    (vc-delete-file filename)
                  (progn
                    (delete-file filename)
                    (message "Deleted file %s" filename)
                    (kill-buffer))))))


          (defun cjm/rename-file-and-buffer ()
            "Rename the current buffer and file it is visiting."
            (interactive)
            (let ((filename (buffer-file-name)))
              (if (not (and filename (file-exists-p filename)))
                  (message "Buffer is not visiting a file!")
                (let ((new-name (read-file-name "New name: " filename)))
                  (cond
                   ((vc-backend filename) (vc-rename-file filename new-name))
                   (t
                    (rename-file filename new-name t)
                    (set-visited-file-name new-name t t)))))))

          (defun cjm/kill-other-buffers ()
            "Kill all other buffers."
            (interactive)
            (mapc 'kill-buffer
                  (delq (current-buffer)
                        (cl-remove-if-not 'buffer-file-name (buffer-list)))))

          (defun cjm/delete-file-and-buffer ()
            "Kill the current buffer and deletes the file it is visiting."
            (interactive)
            (let ((filename (buffer-file-name)))
              (when filename
                (if (vc-backend filename)
                    (vc-delete-file filename)
                  (progn
                    (delete-file filename)
                    (message "Deleted file %s" filename)
                    (kill-buffer))))))


          (defun cjm/kill-other-buffers ()
            "Kill all other buffers."
            (interactive)
            (mapc 'kill-buffer
                  (delq (current-buffer)
                        (cl-remove-if-not 'buffer-file-name (buffer-list)))))

          (defun cjm/delete-file-and-buffer ()
            "Kill the current buffer and deletes the file it is visiting."
            (interactive)
            (let ((filename (buffer-file-name)))
              (when filename
                (if (vc-backend filename)
                    (vc-delete-file filename)
                  (progn
                    (delete-file filename)
                    (message "Deleted file %s" filename)
                    (kill-buffer))))))

          (defun cjm/open-log ()(interactive)(find-file "c:/Users/Public/dev/docs/org/log.org"))
          ;; (defun cjm/open-project ()(interactive)(find-file "c:/Users/Public/dev/docs/org/projects/rf2.org"))
          (defun cjm/open-project ()(interactive)(find-file "c:/Users/Public/dev/docs/org/projects/refinitiv.org"))
          (defun cjm/open-config ()(interactive)(find-file (concat (expand-file-name "~/.emacs.d") "/configuration.org")))

          (defun cjm/kill-current-buffer ()
            "Kill the current buffer without prompting."
            (interactive)
            (kill-buffer (current-buffer)))

          (defun cjm/kill-other-buffers ()
            "Kill all other buffers."
            (interactive)
            (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

          (defun hrs/append-to-path (path)
            "Add a path both to the $PATH variable and to Emacs' exec-path."
            (setenv "PATH" (concat (getenv "PATH") ":" path))
            (add-to-list 'exec-path path))


          (defun cjm/copy-file-name-to-clipboard ()
            "Copy the current buffer file name to the clipboard."
            (interactive)
            (let ((filename (if (equal major-mode 'dired-mode)
                                default-directory
                              (buffer-file-name))))
              (when filename
                (kill-new filename)
                (message "Copied buffer file name '%s' to the clipboard." filename))))


          (defun cjm/copy-current-line-position-to-clipboard ()
            "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
            (interactive)
            (let ((path-with-line-number
                   (concat (dired-replace-in-string (getenv "HOME") "~" (buffer-file-name)) "::" (number-to-string (line-number-at-pos)))))
              (kill-new path-with-line-number)
              (message (concat path-with-line-number " copied to clipboard"))))
#+end_src

* Orgmode
TODO https://github.com/vspinu/company-math
#+begin_src emacs-lisp
(message "Orgmode")
#+end_src

Collapse src blocks by default, and toggle.
#+begin_src emacs-lisp

;; following https://www.eliasstorms.net/zetteldeft/

;; gives link highlighting on page, used by zetteldeft
(use-package avy)
;; ?
(use-package ace-window)


;; render fragments of latex when cursor leaves them
(use-package org-fragtog
  :config
(if cjm/is-windows nil (add-hook 'org-mode-hook 'org-fragtog-mode))
)


(use-package
  deft
  :ensure t
  :custom
  (deft-extensions '("org" "md" "txt"))
  ;; (deft-directory "~/Dropbox/org/notes")
  (deft-directory cjm/note-dir)
  (deft-use-filename-as-title t))


(defun cjm/inhibit-buffer-messages ()
  "Set `inhibit-message' buffer-locally."
  (setq-local inhibit-message t))

(use-package zetteldeft
  :ensure t
  :after deft
  ;; (add-hook 'org-mode-hook 'cjm/inhibit-buffer-messages)
  :config (zetteldeft-set-classic-keybindings)
)

  ;; TODO move to orgmode hook
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t) 
     (python . t))
) ; this line activates dot

(setq org-src-tab-acts-natively t)
  (use-package elisp-format)


  ;; TODO https://emacs.stackexchange.com/a/30523/16359
  ;; (use-package orglink
  ;;   :config
  ;; )
  ;; 	(use-package flycheck-aspell)
  ;; (add-to-list 'flycheck-checkers 'tex-aspell-dynamic)
  ;; (setq-default ispell-program-name "C:/dev/bin/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")
  (setq-default ispell-program-name "c:/Users/Public/dev/bin/hunspell/bin/hunspell.exe")

  (add-to-list 'exec-path "c:/Users/Public/dev/bin/hunspell/bin/")

  (setq ispell-program-name (locate-file "hunspell"
                                         exec-path exec-suffixes 'file-executable-p))


  ;; (setq ispell-dictionary "en_US,en_GB")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  ;; (ispell-set-spellchecker-params)
  ;; (ispell-hunspell-add-multi-dic "en_US,en_GB")

  ;; (setenv "LANG" "en_US ru_RU")

  (setenv "LANG" "en_US"	)
  (setenv "DICTPATH" "c:/Users/Public/dev/bin/hunspell/share/hunspell/")
  ;; (setq-default  ispell-program-name "c:/msys64/mingw64/bin/hunspell.exe")
  ;;  (with-eval-after-load "ispell"
  ;;    (setq ispell-really-hunspell t)
  ;;    ;; (setq ispell-program-name "hunspell")

  ;;       (setq ispell-program-name (locate-file "hunspell"
  ;;                exec-path exec-suffixes 'file-executable-p))

  ;; (setq ispell-dictionary "en_US")
  ;;    ;; ispell-set-spellchecker-params has to be called
  ;;    ;; before ispell-hunspell-add-multi-dic will work
  ;;    ;; (ispell-set-spellchecker-params)
  ;;    (ispell-hunspell-add-multi-dic "en_US"))

  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

  (setq ispell-dictionary "british")

  ;; get tabs working nicely in babel
  (setq org-src-tab-acts-natively t)

  (setq org-edit-src-content-indentation 0)

  (defun my-tab-related-stuff ()
    ;; (setq indent-tabs-mode t)
    (setq tab-stop-list (number-sequence 4 200 4))
    (setq tab-width 2)
    (setq evil-auto-indent nil)
    (setq indent-line-function 'insert-tab))

  (add-hook 'org-mode-hook 'my-tab-related-stuff)


  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  (defvar org-blocks-hidden nil)

  (defun org-toggle-blocks ()
    (interactive)
    (if org-blocks-hidden
        (org-show-block-all)
      (org-hide-block-all))
    (setq-local org-blocks-hidden (not org-blocks-hidden)))


  (add-hook 'org-mode-hook 'org-toggle-blocks)
  (add-hook 'org-mode-hook 'auto-fill-mode)
(setq org-startup-with-inline-images t)
#+end_src

Note taking in org mode following [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Org-mode Workflow Part 3: Zettelkasten with Org-mode · Jethro Kuan]]

[[https://blog.jethro.dev/posts/how_to_take_smart_notes_org/][How To Take Smart Notes With Org-mode · Jethro Kuan]]
https://github.com/org-roam/org-roam/

Note taking tools in emacs
org-cliplink: copy link to clipboard then org-cliplink inserts with metadata
org-download: web images

#+begin_src emacs-lisp
(use-package org-cliplink)
(use-package org-download)
#+end_src

capturing stuff, org-capture of course:
#+BEGIN_SRC emacs-lisp
;; this has nice reformat   (lisp-multiline)
(use-package lispy)
(use-package evil-lispy)
(setq org-capture-templates `(("j" "Journal Note" entry (file ,(concat cjm/note-dir "/ideas.org"))
                               "* Event: %?\n\n  %i\n\n  From: %a"
                               :empty-lines 1)

                              ("i" "Idea" entry (file+headline ,(concat cjm/note-dir "/ideas.org")
                                                                  "Ideas")
                               "* %u %i%?"
                               :empty-lines 1)))

;; (setq org-capture-templates
;;       (("t" "Todo" entry (file "~/org/Refile.org")
;;                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
;;               ;; NOTE state that the function needs evaluating by using comma
;;               ("i" "Idea" entry (file ,(concat cjm/note-dir "ideas.org")))
;;               ;; ("i" "Idea" entry (file "c:/Users/Public/dev/docs/notes/ideas.org")
;;                "* IDEA %?\n%T\n")
;;               ("d" "Diary" entry (file+datetree "~/org/Diary.org")
;;                "* %?\n%T\n" :clock-in t :clock-resume t)
;;               ("j" "Journal" entry (file+datetree+prompt "~/org/Diary.org")
;;                "* %?\n%T\n" :clock-in t :clock-resume t)
;;               ("h" "Habit" entry (file "~/git/org/Refile.org")
;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")))

(general-define-key
 :keymaps 'org-capture-mode-map
 "<M-return>" 'org-capture-kill
 "<C-return>" 'org-capture-finalize)

(setq org-capture-templates
      (quote(
;; %u inactive datetime, %t active
;; %i%? insert?
;; https://gist.github.com/mrbig033/bcf387e3a56cdf19f6c618756f0c358c#file-packages-el
  ;; ("i" "Idea" entry (file ,(concat cjm/note-dir "tofile.org")) "* %u %i%?" :empty-lines 1)

  ("i" "Idea" entry (file ,(concat cjm/note-dir "ideas.org"))
	("s" "Social" entry  (file+headline "~/org/Creative/Social/Public/social_public.org" "Refile") "* %u %i%?")
	("r" "Refile" entry  (file+headline "~/org/Planning/planning.org" "Refile") "* %u %i%?" :empty-lines 1)
	("0" "Daily"  entry  (file+headline "~/org/Planning/planning.org" "Daily")  "* TODO %u %i%?")
	("1" "Agora"  entry  (file+headline "~/org/Planning/planning.org" "Agora")  "* TODO %u %i%?")
	("2" "Logo"   entry  (file+headline "~/org/Planning/planning.org" "Logo")   "* TODO %u %i%?")
	("3" "Depois" entry  (file+headline "~/org/Planning/planning.org" "Depois") "* TODO %u %i%?")
	("4" "Um Dia" entry  (file+headline "~/org/Planning/planning.org" "Um Dia") "* TODO %u %i%?")))))



;; (require 'org)
;; (add-to-list 'org-capture-templates
;;              '("1" "Ideas"  entry
;;                (file "c:/Users/Public/dev/docs/notes/ideas.org")
;;                ;; (file eval(concat cjm/note-dir "/ideas.org"))
;;                "* IDEA %?" :empty-lines 1))

  #+END_SRC

To file:
#+begin_src emacs-lisp
(setq org-agenda-files '("c:/Users/Public/dev/docs/org/roam"))

;; (use-package org-roam
  ;; :hook
  ;; (after-init . org-roam-mode)
  ;; :config

  ;; (org-roam-directory "c:/Users/Public/dev/docs/org/roam")
;; )

  ;; use / in dired mode to
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))

(setq org-return-follows-link t)

(add-hook 'org-mode-hook
'(lambda ()
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s")) ))

  (setq org-agenda-start-day nil)
  (setq org-agenda-span 'week)
  (setq org-agenda-start-on-weekday nil)

  ;; set maximum indentation for description lists
  (setq org-list-description-max-indent 5)

  ;; prevent demoting heading also shifting text inside sections
  (setq org-adapt-indentation nil)
  (setq org-src-preserve-indentation t)

  ;; (setq cjm/home-dir "h:/")
  ;; (setq org-directory (concat cjm/home-dir "org/"))

  ;;(setq cjm-org-directory (concat cjm/home-dir "/org/"))
  ;; org-default-notes-file gets set by org-projectile to project root
  (setq cjm-org-default-notes-file (concat org-directory "inbox.org"))
  (setq cjm-dig-capture-file (concat org-directory "dig.org"))
  (setq cjm-quat-data-capture-file (concat org-directory "quant_data.org"))

  (require 'org)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

  (setq org-enforce-todo-dependencies t)
  (setq org-agenda-dim-blocked-tasks 'invisible)
  (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "DONE")))

;;; where to open links
  ;; default: (setq org-link-frame-setup '((file . find-file-other-window)))
  ;; this has a nice snippet for maybe opening links depedning on extension https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
  ;; open links in same window
  ;; (setq org-link-frame-setup '((file . find-file)))
  ;; open in other window
  (setq org-link-frame-setup '((file . find-file-other-window)))

  (defun copy-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as 'file:</path/to/file>::<line-number>'."
    (interactive)
    (let ((path-with-line-number
           (concat "file:" (dired-replace-in-string (getenv "HOME") "~" (buffer-file-name)) "::" (number-to-string (line-number-at-pos)))))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (defun my/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(
                    org-document-title
                    org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
  (add-hook 'org-mode-hook 'ivy-mode)


  ;; should be able to do the above with this, didn't work though
  ;; (setq theming-modifications
  ;;       '((spacemacs-dark
  ;;          (org-document-title ((t (:weight 'semi-bold :height 1.1))))
  ;;          (org-level-1 :weight 'semi-bold :height 1.0)
  ;;          (org-level-2 :weight 'semi-bold :height 1.0)
  ;;          (org-level-3 :weight 'semi-bold :height 1.0)
  ;;          (org-level-4 :weight 'semi-bold :height 1.0)
  ;;          (org-level-5 :weight 'semi-bold :height 1.0))))



  ;; (setq org-agenda-files (list org-directory))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-closed-keep-when-no-todo t)

  (setq org-adapt-indent nil)

  ;; tags
  ;; Tags with fast selection keys
  (setq org-tag-alist (quote (
                              ;; (:startgroup)
                              ;; ("@errand" . ?e)
                              ;; ("@office" . ?o)
                              ;; ("@home" . ?H)
                              ;; (:endgroup)
                              ("WAITING" . ?w)
                              ("HOLD" . ?h)
                              ("IDEA" . ?i)
                              ("reading" . ?r)
                              ;; ("PERSONAL" . ?P)
                              ;; ("DRAFT" . ?D)
                              ;; ("WORK" . ?W)
                              ("NOTE" . ?n)
                              ("export" . ?e)

                              ("data" . ?d)
                              ("model" . ?m)
                              ("bot" . ?b))))


                              ;; refiling
                              (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                                               (org-agenda-files :maxlevel . 9))))

                              (defun cjm-org-skip-subtree-if-priority (priority)
                                "Skip an agenda subtree if it has a priority of PRIORITY.
    PRIORITY may be one of the characters ?A, ?B, or ?C."
                                (let ((subtree-end (save-excursion (org-end-of-subtree t)))
                                      (pri-value (* 1000 (- org-lowest-priority priority)))
                                      (pri-current (org-get-priority (thing-at-point 'line t))))
                                  (if (= pri-value pri-current)
                                      subtree-end
                                    nil)))


                                        ; custom agenda view
                                        ; composite agenda: supply list of types to show up in agenda
                              (setq org-agenda-custom-commands
                                    '(("c" "Custom agenda"
                                       ((tags "PRIORITY=\"A\""
                                              ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                               (org-agenda-overriding-header "High-priority:")))
                                        (tags "DEADLINE>=\"<today>\""
                                              ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                               (org-agenda-overriding-header "Deadlines:")))
                                        ;; (agenda "")
                                        (agenda . " %i %-12:c%?-12t% s")
                                        (todo "IN-PROGRESS" ((org-agenda-overriding-header "In-progress")))

                                        (alltodo ""
                                                 ((org-agenda-skip-function
                                                   '(or (cjm-org-skip-subtree-if-priority ?A)
                                                        (org-agenda-skip-if nil '(scheduled deadline))
                                                        (org-agenda-skip-entry-if 'todo '("IN-PROGRESS"))))
                                                  (org-agenda-overriding-header "Other:")))))))

                              ;; https://stackoverflow.com/questions/22888785/is-it-possible-to-get-org-mode-to-show-breadcrumbs-in-agenda-todo-list
                              (setq org-agenda-prefix-format '(
                                                               (agenda .
                                                                       ;; TODO replace this with %b
                                                                       ;; https://emacs.stackexchange.com/questions/19091/how-to-set-org-agenda-prefix-format-before-org-agenda-starts
                                                                       " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
                                                               (todo .
                                                                     " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")))

                              (defun org-agenda-show-custom (&optional arg)
                                (interactive "P")
                                (org-agenda arg "c"))

                              ;; (define-key org-mode-map (kbd "<f8>") 'org-agenda-show-unscheduled)
                              (evil-define-key 'normal org-mode-map (kbd "<f8>") 'org-agenda-show-custom)

                                        ; defines filter shown on org agenda screen
                              (add-to-list 'org-agenda-custom-commands
                                           '("D" "Deadlines"
                                             tags "DEADLINE>=\"<today>\""))



                              (setq org-treat-insert-todo-heading-as-state-change t)

                              (defun insert-created-date(&rest ignore)
                                (insert (format-time-string
                                         (concat "\nCREATED: "
                                                 (cdr org-time-stamp-formats))))
                                        ; in org-capture, this folds the entry; when inserting a heading, this moves point back to the heading line
                                (org-back-to-heading)
                                        ; when inserting a heading, this moves point to the end of the line
                                (move-end-of-line()))

                                        ; add to the org-capture hook
                              ;; (add-hook 'org-capture-before-finalize-hook
                              ;;           #'insert-created-date
                              ;;           )

                                        ; hook it to adding headings with M-S-RET
                                        ; do not add this to org-insert-heading-hook, otherwise this also works in non-TODO items
                                        ; and Org-mode has no org-insert-todo-heading-hook
                              ;; (advice-add 'org-insert-todo-heading :after #'insert-created-date)

                              ;; --- calendar stuff
                              ;; start on a monday
                              (setq calendar-week-start-day 1)

                              ;; display week number
                              (copy-face font-lock-constant-face 'calendar-iso-week-face)
                              (set-face-attribute 'calendar-iso-week-face nil
                                                  :height 0.7)
                              (setq calendar-intermonth-text
                                    '(propertize
                                      (format "%2d"
                                              (car
                                               (calendar-iso-from-absolute
                                                (calendar-absolute-from-gregorian (list month day year)))))
                                      'font-lock-face 'calendar-iso-week-face))

                              (copy-face 'default 'calendar-iso-week-header-face)
                              (set-face-attribute 'calendar-iso-week-header-face nil
                                                  :height 0.7)
                              (setq calendar-intermonth-header
                                    (propertize "Wk"                  ; or e.g. "KW" in Germany
                                                'font-lock-face 'calendar-iso-week-header-face))
                              (set-face-attribute 'calendar-iso-week-face nil
                                                  :height 1.0 :foreground "salmon")
#+end_src

* Programming environments

#+begin_src emacs-lisp
(message "Programming environments")
#+end_src

** General

Highlight keywords like TODO etc in code.

#+begin_src emacs-lisp
;; https://github.com/tarsius/hl-todo
(use-package hl-todo

  :config

  (setq hl-todo-keyword-faces
        '(
          ;; ("TODO"   . "#c7edd1")
          ("TODO"   . "#9bc7a7")
          ("FIXME"  . "#FF0000")
          ;; ("NOTE"   . "#A020F0")
          ;; ("NOTE"   . "#1E90FF")
          ("NOTE"   . "#eda574")
          ("UPTO"   . "#ff82c3")))

  (add-hook 'anaconda-mode-hook 'hl-todo-mode)
  (add-hook 'anaconda-mode-hook 'hl-todo-mode))
#+end_src

Evil treat an Emacs symbol as a word. This has the advantage that it
changes depending on the language: foo-bar is one symbol in lisp-mode
but two symbols (separated by -) in c-mode.

#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (defalias #'forward-evil-word #'forward-evil-symbol)
  ;; make evil-search-word look for symbol rather than word boundaries
  (setq-default evil-symbol-word-search t))
#+end_src

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+begin_src emacs-lisp
(use-package subword
  :config (global-subword-mode 1))
#+end_src

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

Add some custom file definitions for syntax checking.
#+begin_src emacs-lisp
;; add extra custom spacemacs config files to emacs-lisp-mode
(setq auto-mode-alist (append '(
                                (".spacemacs.*" . emacs-lisp-mode)
                                ("Rprofile.site" . R-mode))
                              auto-mode-alist))
#+end_src

** Python

#+begin_src emacs-lisp
(message "Programming environments: Python")
#+end_src

#+begin_src emacs-lisp
;; (use-package python-mode)

(use-package cython-mode
  :ensure t
  :mode (("\\.pyx\\'"  . cython-mode)
         ("\\.spyx\\'" . cython-mode)
         ("\\.pxd\\'"  . cython-mode)
         ("\\.pxi\\'"  . cython-mode)))
(use-package jinja2-mode :config (add-to-list 'auto-mode-alist '("\\.tmpl" . jinja2-mode)))
#+end_src

Add =~/.local/bin= to load path. That's where =virtualenv= is installed, and
we'll need that for =jedi=.
#+begin_src emacs-lisp
(hrs/append-to-path "~/.local/bin")
#+end_src


#+begin_src
(hrs/append-to-path "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev")
#+end_src

code folding
https://emacs.stackexchange.com/questions/45883/fold-all-methods-in-a-python-class-with-evil
#+begin_src emacs-lisp

(use-package anaconda-mode
  :config
  ;; (setq python-shell-interpreter "C:/Users/Public/dev/bin/dbConda-2019_07-py37/envs/dev/scripts/ipython.exe")
  (setq python-shell-interpreter cjm/ipython-path)
 (setq python-shell-interpreter-args " -i")
   ;; (setq python-shell-completion-native-enable nil)
;; (setq comint-process-echoes t) 

  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'hs-minor-mode)
  (setq-default tab-width 4))

(use-package reformatter
  :config

  (reformatter-define python-isort
    :program cjm/isort-path
    :args (list "-" "-p quant,datastore")))

(use-package python-black
  :demand t
  :after python
  :config
  (setq python-black-command cjm/black-path))

;; this needs an epc backend setup
;; (use-package company-jedi
;; :ensure t
;; :init
;;   '(add-to-list 'company-backends 'company-jedi)
;; )

;; this uses Jedi to get completions?
;;   (use-package company-anaconda
;;    :ensure t
;;    :init
;;    (eval-after-load "company"
;;     '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
;; )

(setq history-length 100)
(put 'minibuffer-history 'history-length 50)
(put 'evil-ex-history 'history-length 50)
(put 'kill-ring 'history-length 25)
#+end_src

Snippets that probably should exist in yas snippet.

#+begin_src emacs-lisp
(defun cjm/python-insert-breakpoint ()
  "Insert Python breakpoint above point."
  (interactive)
  (evil-open-above 1)
  ;; it's annoying to have this broken by yap
  ;; (insert "import pdb; pdb.set_trace()  # BREAKPOINT")
  (insert "pdb.set_trace()  # BREAKPOINT")
  (evil-normal-state)
  (interactive)
  (evil-open-above 1)
  (insert "import pdb")
  ;; (insert "import pdb; pdb.set_trace()  # BREAKPOINT")
  (evil-normal-state))

(defun cjm/python-insert-ifname ()
  (interactive)
  (evil-open-above 1)
  (insert "if __name__ == '__main__':")
  (evil-normal-state))

(defun cjm/python-insert-numpy-pandas()
  "Insert Python breakpoint above point."
  (interactive)
  (evil-open-above 1)
  (insert "import numpy as np")
  (evil-normal-state)
  (interactive)
  (evil-open-above 1)
  (insert "import pandas as pd")
  (evil-normal-state))
#+end_src


Use =flycheck= for syntax checking:

Configure Jedi along with the associated =company= mode:

#+begin_src
(use-package company-jedi)
(add-to-list 'company-backends 'company-jedi)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
#+end_src

** Javascript / JSON

Have at least some code folding in for json/javascript.
#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'hs-minor-mode)
#+end_src

Finish.
#+begin_src emacs-lisp
(message "End Config")
#+end_src
** Other
#+begin_src emacs-lisp
(use-package csharp-mode)
#+end_src
